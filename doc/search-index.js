var searchIndex = {};
searchIndex["rstack"] = {"doc":"Thread stack traces of remote processes.","items":[[3,"Error","rstack","The error type returned by methods in this crate.",null,null],[3,"Process","","Information about a remote process.",null,null],[3,"Thread","","Information about a thread of a remote process.",null,null],[3,"Frame","","Information about a stack frame of a remote process.",null,null],[3,"ProcedureName","","Information about a name of a procedure.",null,null],[3,"ProcedureInfo","","Information about a procedure.",null,null],[3,"TraceOptions","","A struct controlling the behavior of tracing.",null,null],[5,"trace","","A convenience wrapper over `TraceOptions` which returns a maximally verbose trace.",null,{"inputs":[{"name":"u32"}],"output":{"generics":["process"],"name":"result"}}],[6,"Result","","The result type returned by methods in this crate.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"process"}}],[11,"id","","Returns the process's ID.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"threads","","Returns information about the threads of the process.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"id","","Returns the thread's ID.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"name","","Returns the thread's name, if known.",2,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"frames","","Returns the frames of the stack trace representing the state of the thread.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"ip","","Returns the instruction pointer of the frame.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_signal","","Determines if the frame is from a signal handler, if known.",3,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"name","","Returns the name of the procedure that this frame is running, if known.",3,{"inputs":[{"name":"self"}],"output":{"generics":["procedurename"],"name":"option"}}],[11,"info","","Returns information about the procedure that this frame is running, if known.",3,{"inputs":[{"name":"self"}],"output":{"generics":["procedureinfo"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"procedurename"}}],[11,"name","","Returns the name of the procedure.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"offset","","Returns the offset of the instruction pointer from this procedure's starting address.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"procedureinfo"}}],[11,"start_ip","","Returns the starting address of this procedure.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end_ip","","Returns the ending address of this procedure.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"traceoptions"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"traceoptions"}}],[11,"new","","Returns a new `TraceOptions` with default settings.",6,{"inputs":[],"output":{"name":"traceoptions"}}],[11,"thread_names","","If set, the names of the process's threads will be recorded.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"traceoptions"}}],[11,"procedure_names","","If set, the names of the procedures running in the frames of the process's threads will be recorded.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"traceoptions"}}],[11,"procedure_info","","If set, information about the procedures running in the frames of the process's threads will be recorded.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"traceoptions"}}],[11,"trace","","Traces the threads of the specified process.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["process"],"name":"result"}}]],"paths":[[3,"Error"],[3,"Process"],[3,"Thread"],[3,"Frame"],[3,"ProcedureName"],[3,"ProcedureInfo"],[3,"TraceOptions"]]};
searchIndex["rstack_self"] = {"doc":"Retrieve stack traces of all threads of the process.","items":[[3,"Error","rstack_self","The error type returned by methods in this crate.",null,null],[3,"Thread","","Information about a thread.",null,null],[3,"Frame","","Information about a stack frame.",null,null],[3,"Symbol","","Information about a symbol.",null,null],[5,"trace","","Returns stack traces of all of the threads the calling process.",null,{"inputs":[{"name":"command"}],"output":{"generics":["vec"],"name":"result"}}],[5,"child","","The function called by process spawned by a call to [`trace`].",null,{"inputs":[],"output":{"name":"result"}}],[6,"Result","","The result type returned by methods in this crate.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"id","","Returns the thread's ID.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"name","","Returns the thread's name.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"frames","","Returns the stack frames of the thread.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"ip","","Returns the instruction pointer of the frame.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"symbols","","Returns the symbols resolved to this frame.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"symbol"}}],[11,"name","","Returns the name of the symbol, if known.",3,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"file","","Returns the file in which this symbol is defined, if known.",3,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"line","","Returns the line at which the address which resolved to this symbol corresponds, if known.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}]],"paths":[[3,"Error"],[3,"Thread"],[3,"Frame"],[3,"Symbol"]]};
searchIndex["symbolize"] = {"doc":"","items":[[3,"FrameInfo","symbolize","",null,null],[12,"library","","",0,null],[12,"symbol","","",0,null],[5,"query","","",null,{"inputs":[{"name":"usize"}],"output":{"generics":["frameinfo"],"name":"option"}}]],"paths":[[3,"FrameInfo"]]};
searchIndex["systest"] = {"doc":"","items":[],"paths":[]};
searchIndex["unwind"] = {"doc":"An interface to [libunwind].","items":[[3,"Error","unwind","An error returned from libunwind.",null,null],[3,"Byteorder","","The byteorder of an address space.",null,null],[3,"PTraceState","","The unwind state used by the ptrace accessors.",null,null],[3,"PTraceStateRef","","A borrowed reference to a [`PTraceState`].",null,null],[3,"Accessors","","A collection of functions used to unwind an arbitrary process.",null,null],[3,"AddressSpace","","An address space upon which unwinding can be performed.",null,null],[3,"AddressSpaceRef","","A borrowed reference to an [`AddressSpace`].",null,null],[3,"RegNum","","An identifier of a processor register.",null,null],[3,"ProcedureInfo","","Information about a procedure.",null,null],[3,"ProcedureName","","The name of a procedure.",null,null],[3,"Cursor","","A cursor into a frame of a stack.",null,null],[6,"Result","","The result type returned by functions in this crate.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[18,"UNSPEC","","Unspecified error.",0,null],[18,"NOMEM","","Out of memory.",0,null],[18,"BADREG","","Bad register number.",0,null],[18,"READONLYREG","","Attempt to write read-only register.",0,null],[18,"STOPUNWIND","","Stop unwinding.",0,null],[18,"INVALIDIP","","Invalid IP.",0,null],[18,"BADFRAME","","Bad frame.",0,null],[18,"INVAL","","Unsupported operation or bad value.",0,null],[18,"BADVERSION","","Unwind info has unsupported value.",0,null],[18,"NOINFO","","No unwind info found.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"byteorder"}}],[18,"DEFAULT","","The default byte order of the unwind target.",1,null],[18,"LITTLE_ENDIAN","","Little endian.",1,null],[18,"BIG_ENDIAN","","Big endian.",1,null],[18,"PDP_ENDIAN","","PDP endian.",1,null],[11,"from_ptr","","",2,null],[11,"as_ptr","","",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ptracestateref"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ptracestateref"}}],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ptracestateref"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ptracestateref"}}],[11,"new","","Constructs a new `PTraceState` for the specified PID.",2,{"inputs":[{"name":"u32"}],"output":{"generics":["ptracestate"],"name":"result"}}],[11,"ptrace","","Returns `Accessors` which use the ptrace system call to unwind a remote process.",3,{"inputs":[],"output":{"name":"accessors"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"addressspaceref"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"addressspaceref"}}],[11,"new","","Creates a new `AddressSpace`.",4,{"inputs":[{"name":"accessors"},{"name":"byteorder"}],"output":{"generics":["addressspace"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"regnum"}}],[18,"IP","","A generic identifier for the register storing the instruction pointer.",5,null],[18,"SP","","A generic identifier for the register storing the stack pointer.",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"procedureinfo"}}],[11,"start_ip","","Returns the starting address of the procedure.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"end_ip","","Returns the ending address of the procedure.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"procedurename"}}],[11,"name","","Returns the name of the procedure.",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"offset","","Returns the offset of the frame's instruction pointer from the starting address of the named procedure.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"local","","Creates a cursor over the stack of the calling thread.",8,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[11,"remote","","Creates a cursor over the stack of a \"remote\" process.",8,{"inputs":[{"name":"addressspaceref"},{"name":"t"}],"output":{"generics":["cursor"],"name":"result"}}],[11,"step","","Steps the cursor into the next older stack frame.",8,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"register","","Returns the value of an integral register at the current frame.",8,{"inputs":[{"name":"self"},{"name":"regnum"}],"output":{"generics":["u64"],"name":"result"}}],[11,"procedure_info","","Returns information about the procedure at the current frame.",8,{"inputs":[{"name":"self"}],"output":{"generics":["procedureinfo"],"name":"result"}}],[11,"procedure_name_raw","","Returns the name of the procedure of the current frame.",8,null],[11,"procedure_name","","Returns the name of the procedure of the current frame.",8,{"inputs":[{"name":"self"}],"output":{"generics":["procedurename"],"name":"result"}}],[11,"is_signal_frame","","Determines if the current frame is a signal frame.",8,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}]],"paths":[[3,"Error"],[3,"Byteorder"],[3,"PTraceState"],[3,"Accessors"],[3,"AddressSpace"],[3,"RegNum"],[3,"ProcedureInfo"],[3,"ProcedureName"],[3,"Cursor"]]};
searchIndex["unwind_sys"] = {"doc":"","items":[[3,"unw_tdep_save_loc_t","unwind_sys","",null,null],[12,"unused","","",0,null],[3,"unw_tdep_proc_info_t","","",null,null],[12,"unused","","",1,null],[3,"unw_cursor_t","","",null,null],[12,"opaque","","",2,null],[3,"unw_proc_info_t","","",null,null],[12,"start_ip","","",3,null],[12,"end_ip","","",3,null],[12,"lsda","","",3,null],[12,"handler","","",3,null],[12,"gp","","",3,null],[12,"flags","","",3,null],[12,"format","","",3,null],[12,"unwind_info_size","","",3,null],[12,"unwind_info","","",3,null],[12,"extra","","",3,null],[3,"unw_accessors_t","","",null,null],[12,"find_proc_info","","",4,null],[12,"put_unwind_info","","",4,null],[12,"get_dyn_info_list_addr","","",4,null],[12,"access_mem","","",4,null],[12,"access_reg","","",4,null],[12,"resume","","",4,null],[12,"get_proc_name","","",4,null],[3,"unw_save_loc_t","","",null,null],[12,"type_","","",5,null],[12,"u","","",5,null],[12,"extra","","",5,null],[19,"unw_save_loc_t_u","","",null,null],[12,"addr","","",6,null],[12,"regnum","","",6,null],[4,"unw_addr_space","","",null,null],[4,"unw_caching_policy_t","","",null,null],[13,"UNW_CACHE_NONE","","",7,null],[13,"UNW_CACHE_GLOBAL","","",7,null],[13,"UNW_CACHE_PER_THREAD","","",7,null],[4,"unw_save_loc_type_t","","",null,null],[13,"UNW_SLT_NONE","","",8,null],[13,"UNW_SLT_MEMORY","","",8,null],[13,"UNW_SLT_REG","","",8,null],[5,"unw_tdep_getcontext","","",null,null],[5,"unw_init_local","","",null,null],[5,"unw_init_remote","","",null,null],[5,"unw_step","","",null,null],[5,"unw_get_reg","","",null,null],[5,"unw_set_reg","","",null,null],[5,"unw_resume","","",null,null],[5,"unw_create_addr_space","","",null,null],[5,"unw_destroy_addr_space","","",null,null],[5,"unw_get_accessors","","",null,null],[5,"unw_flush_cache","","",null,null],[5,"unw_set_caching_policy","","",null,null],[5,"unw_regname","","",null,null],[5,"unw_get_proc_info","","",null,null],[5,"unw_get_save_loc","","",null,null],[5,"unw_tdep_is_fpreg","","",null,null],[5,"unw_is_signal_frame","","",null,null],[5,"unw_get_proc_name","","",null,null],[5,"unw_strerror","","",null,null],[7,"unw_local_addr_space","","",null,null],[5,"_UPT_create","","",null,null],[5,"_UPT_destroy","","",null,null],[7,"_UPT_accessors","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unw_tdep_save_loc_t"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unw_tdep_proc_info_t"}}],[6,"unw_word_t","","",null,null],[6,"unw_sword_t","","",null,null],[6,"unw_tdep_context_t","","",null,null],[6,"unw_regnum_t","","",null,null],[6,"unw_addr_space_t","","",null,null],[6,"unw_context_t","","",null,null],[17,"UNW_TDEP_CURSOR_LEN","","",null,null],[17,"UNW_X86_64_RAX","","",null,null],[17,"UNW_X86_64_RDX","","",null,null],[17,"UNW_X86_64_RCX","","",null,null],[17,"UNW_X86_64_RBX","","",null,null],[17,"UNW_X86_64_RSI","","",null,null],[17,"UNW_X86_64_RDI","","",null,null],[17,"UNW_X86_64_RBP","","",null,null],[17,"UNW_X86_64_RSP","","",null,null],[17,"UNW_X86_64_R8","","",null,null],[17,"UNW_X86_64_R9","","",null,null],[17,"UNW_X86_64_R10","","",null,null],[17,"UNW_X86_64_R11","","",null,null],[17,"UNW_X86_64_R12","","",null,null],[17,"UNW_X86_64_R13","","",null,null],[17,"UNW_X86_64_R14","","",null,null],[17,"UNW_X86_64_R15","","",null,null],[17,"UNW_X86_64_RIP","","",null,null],[17,"UNW_TDEP_LAST_REG","","",null,null],[17,"UNW_X86_64_CFA","","",null,null],[17,"UNW_TDEP_IP","","",null,null],[17,"UNW_TDEP_SP","","",null,null],[17,"UNW_TDEP_BP","","",null,null],[17,"UNW_TDEP_EH","","",null,null],[17,"UNW_ESUCCESS","","",null,null],[17,"UNW_EUNSPEC","","",null,null],[17,"UNW_ENOMEM","","",null,null],[17,"UNW_EBADREG","","",null,null],[17,"UNW_EREADONLYREG","","",null,null],[17,"UNW_ESTOPUNWIND","","",null,null],[17,"UNW_EINVALIDIP","","",null,null],[17,"UNW_EBADFRAME","","",null,null],[17,"UNW_EINVAL","","",null,null],[17,"UNW_EBADVERSION","","",null,null],[17,"UNW_ENOINFO","","",null,null],[17,"UNW_REG_IP","","",null,null],[17,"UNW_REG_SP","","",null,null],[17,"UNW_REG_EH","","",null,null],[17,"UNW_REG_LAST","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unw_cursor_t"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"unw_proc_info_t"}}]],"paths":[[3,"unw_tdep_save_loc_t"],[3,"unw_tdep_proc_info_t"],[3,"unw_cursor_t"],[3,"unw_proc_info_t"],[3,"unw_accessors_t"],[3,"unw_save_loc_t"],[19,"unw_save_loc_t_u"],[4,"unw_caching_policy_t"],[4,"unw_save_loc_type_t"]]};
initSearch(searchIndex);
